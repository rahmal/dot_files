"use strict";var N=Object.defineProperty;var It=Object.getOwnPropertyDescriptor;var At=Object.getOwnPropertyNames;var St=Object.prototype.hasOwnProperty;var Mt=(i,t)=>{for(var e in t)N(i,e,{get:t[e],enumerable:!0})},kt=(i,t,e,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of At(t))!St.call(i,r)&&r!==e&&N(i,r,{get:()=>t[r],enumerable:!(o=It(t,r))||o.enumerable});return i};var Dt=i=>kt(N({},"__esModule",{value:!0}),i);var ne={};Mt(ne,{activate:()=>re});module.exports=Dt(ne);var Rt=require("vscode");var Bt=require("node:path"),a=require("vscode");var V=require("vscode"),c=()=>V.window.activeTextEditor,O="N:-1",$=({document:i,selection:t})=>i.uri.scheme!=="file"?O:`${i.fileName}:${t.active.line}`;var W=require("vscode"),P=(i,t=[])=>Promise.resolve(W.window.showInformationMessage(i,...t)),d=(i,...t)=>Promise.resolve(W.window.showErrorMessage(i,...t));var _=require("vscode"),s=i=>_.workspace.getConfiguration("gitblame").get(i);var Q=require("vscode"),Nt=1e3,q=60*Nt,K=60*q,Y=24*K,X=365.25*Y,Ot=X/12,$t=[["year",X],["month",Ot],["day",Y],["hour",K],["minute",q]],G=(i,t)=>{let e=i.valueOf()-t.valueOf(),o=new Intl.RelativeTimeFormat(Q.env.language);for(let[r,n]of $t)if(e>n)return o.format(-1*Math.round(e/n),r);return"right now"};var L=({author:i,committer:t,hash:e,summary:o})=>{let r=new Date,n=({date:D})=>D.toISOString().slice(0,10),m=G(r,i.date),x=G(r,t.date),v=(D,Et)=>(Ut="")=>D.substr(0,Number.parseInt(Ut||Et,10));return{"author.mail":i.mail,"author.name":i.name,"author.timestamp":i.timestamp,"author.tz":i.tz,"author.date":n(i),"committer.mail":t.mail,"committer.name":t.name,"committer.timestamp":t.timestamp,"committer.tz":t.tz,"committer.date":n(t),"commit.hash":v(e,"64"),"commit.hash_short":v(e,"7"),"commit.summary":v(o,"65536"),"time.ago":m,"time.c_ago":x}};var Wt=(i,t,e)=>o=>{let r=i.indexOf(o,t);return r===-1||r>e?e:r},Gt=(i,t)=>(e,o)=>o===e||t===e?"":i.substring(e+1,o);function jt(i,t,e){let o=t.indexOf("}",e),r=Wt(t,e,o),n=Gt(t,o),m=r(","),x=r("|"),v=t.substring(e,Math.min(m,x));return[i[v]??v,n(x,o),n(m,x)]}function*zt(i,t){let e=0,o=0,r=0;for(let n=0;n<i.length;n++)if(r===0&&i[n]==="$")r=2;else if(r===2&&i[n]==="{")r=1,o=n-1,yield[i.slice(e,o)],e=o;else if(r===2)r=0;else if(r===1){r=0;let m=i.indexOf("}",n);if(m===-1)break;yield jt(t,i,n),e=m+1}yield[i.slice(e)]}var Z=(i,t="")=>t==="u"?i.toUpperCase():t==="l"?i.toLowerCase():t?`${i}|${t}`:i,Ht=i=>i.replace(/\u202e/g,""),y=(i,t)=>{let e="";for(let[o,r,n]of zt(i,t))typeof o=="string"?e+=Z(o,r):e+=Z(o(n),r);return Ht(e)},J=i=>y(s("statusBarMessageFormat"),L(i)),tt=i=>y(s("inlineMessageFormat"),L(i));var u=i=>i?.document.uri.scheme==="file";var p=require("vscode");function w(i,t=!1){if(t&&i==="HEAD")return!0;let e=i.length;return(e===40||e===64)&&/^[a-z0-9]+$/.test(i)}function f(i){let t=i.hash.length;return(t===40||t===64)&&/^0+$/.test(i.hash)}var et="No info about the current line",F=class{statusBar;decorationType;configChange;ongoingViewUpdateRejects=new Set;statusBarText="";statusBarTooltip="";statusBarCommand=!1;statusBarPriority=void 0;constructor(){this.decorationType=p.window.createTextEditorDecorationType({}),this.statusBarPriority=s("statusBarPositionPriority"),this.statusBar=this.createStatusBarItem(),this.configChange=p.workspace.onDidChangeConfiguration(t=>{if(t.affectsConfiguration("gitblame")){let e=s("statusBarPositionPriority");this.statusBarPriority!==e&&(this.statusBarPriority=e,this.statusBar=this.createStatusBarItem())}})}set(t,e,o=!0){t?f(t)?(this.text(s("statusBarMessageNoCommit"),!1,et),e&&this.createLineDecoration(s("inlineMessageNoCommit"),e,o)):(this.text(J(t),!0),e&&this.createLineDecoration(tt(t),e,o)):this.clear()}clear(){this.text("",!1,et),this.removeLineDecoration()}activity(){this.text("$(extensions-refresh)",!1,"Waiting for git blame response")}fileToLong(){let t=s("maxLineCount");this.text("",!1,`No blame information is available. File has more than ${t} lines`)}dispose(){this.statusBar?.dispose(),this.decorationType.dispose(),this.configChange.dispose()}command(){let t=s("statusBarMessageClickAction");return t==="Open tool URL"?"gitblame.online":t==="Open git show"?"gitblame.gitShow":t==="Copy hash to clipboard"?"gitblame.addCommitHashToClipboard":"gitblame.quickInfo"}updateStatusBar(t){t.text=this.statusBarText,t.tooltip=this.statusBarTooltip,t.command=this.statusBarCommand?this.command():void 0}text(t,e,o=""){let r=e||!o?"":` - ${o}`;this.statusBarText=`$(git-commit) ${t.trimEnd()}`,this.statusBarTooltip=`git blame${r}`,this.statusBarCommand=e,this.updateStatusBar(this.statusBar)}createStatusBarItem(){this.statusBar?.dispose();let t=p.window.createStatusBarItem(p.StatusBarAlignment.Right,this.statusBarPriority);return this.updateStatusBar(t),t.show(),t}async createLineDecoration(t,e,o){if(!s("inlineMessageEnabled"))return;let r=s("inlineMessageMargin"),n=new p.Position(e.selection.active.line,Number.MAX_SAFE_INTEGER);this.removeLineDecoration(),o&&await this.delayUpdate(s("delayBlame"))&&e.setDecorations?.(this.decorationType,[{renderOptions:{after:{contentText:t,margin:`0 0 0 ${r}rem`,color:new p.ThemeColor("gitblame.inlineMessage")}},range:new p.Range(n,n)}])}removeLineDecoration(){c()?.setDecorations?.(this.decorationType,[])}preUpdate(t){if(this.clear(),!u(t))return!1;for(let e of this.ongoingViewUpdateRejects)e();return this.ongoingViewUpdateRejects.clear(),this.activity(),!0}async delayUpdate(t){if(t>0)try{return await new Promise((e,o)=>{this.ongoingViewUpdateRejects.add(o),setTimeout(()=>e(!0),t)})}catch{return!1}return!0}};var U=require("node:fs"),yt=require("vscode");var it=require("vscode"),l=class i{static instance;out;static getInstance(){return i.instance??=new i,i.instance}constructor(){this.out=it.window.createOutputChannel("Git Blame",{log:!0})}static error(t){t instanceof Error&&i.getInstance().out.error(t)}static info(t){i.getInstance().out.info(t)}dispose(){i.instance=void 0,this.out.dispose()}};var ht=require("node:fs/promises"),vt=require("node:path");var nt=require("node:child_process"),st=require("node:fs/promises"),b=require("node:path"),at=require("vscode");var ot=require("node:child_process");var rt=async(i,t,e={})=>(l.info(`${i} ${t.join(" ")}`),new Promise(o=>(0,ot.execFile)(i,t,{...e,encoding:"utf8"},(r,n,m)=>{r||m?(l.error(r||m),o("")):o(n.trim())})));var g=(i,t=" ")=>{let e=i.indexOf(t[0]);return e===-1?[i,""]:[i.substr(0,e),i.substr(e+1).trim()]};var j=()=>{let i=at.extensions.getExtension("vscode.git");return i?.exports.enabled?i.exports.getAPI(1).git.path:"git"},h=(i,...t)=>rt(j(),t,{cwd:(0,b.dirname)(i),env:{...process.env,LC_ALL:"C"}}),mt=async i=>{let t=c();return u(t)?h(t.document.fileName,"ls-remote","--get-url",i):""},lt=async i=>{let t=c();if(!u(t))return"";let{fileName:e}=t.document,o=await h(e,"symbolic-ref","-q","--short","HEAD"),r=await h(e,"config",`branch.${o}.remote`);return h(e,"config",`remote.${r||i}.url`)},T=async i=>h(i,"rev-parse","--absolute-git-dir"),ct=(i,t)=>{let e=["blame","-C","--incremental","--",i];return s("ignoreWhitespace")&&e.splice(1,0,"-w"),t&&e.splice(1,0,"-S",t),l.info(`${j()} ${e.join(" ")}`),(0,nt.spawn)(j(),e,{cwd:(0,b.dirname)(i),stdio:["ignore","pipe","pipe"],env:{...process.env,LC_ALL:"C"}})},pt=async i=>{let t=s("revsFile");if(t.length===0)return;let e=await T(i),o=(0,b.dirname)(e);return(await Promise.allSettled(t.map(n=>(0,b.join)(o,n)).map(n=>(0,st.access)(n).then(()=>n)))).filter(n=>n.status==="fulfilled")[0]?.value},ut=async()=>{let i=c();if(!u(i))return"";let{fileName:t}=i.document;return h(t,"ls-files","--full-name","--",t)},dt=async i=>{let t=c();if(!u(t))return"";let e=await h(t.document.fileName,"rev-parse","--abbrev-ref",`${i}/HEAD`);return g(e,"/")[1]};var Vt=i=>({author:{mail:"",name:"",timestamp:"",date:new Date,tz:""},committer:{mail:"",name:"",timestamp:"",date:new Date,tz:""},hash:i,summary:""}),_t=i=>({commit:i,filename:""}),Qt=10;async function*qt(i){let t=0,e=1;for(;t<i.length;){let o=i.indexOf(`
`,t);yield g(i.toString("utf8",t,o)),e%Qt===0&&await new Promise(queueMicrotask),e+=1,t=o+1}}var Kt=(i,t,e)=>{t==="time"?(i.timestamp=e,i.date=new Date(Number.parseInt(e,10)*1e3)):t==="tz"||t==="mail"?i[t]=e:t===""&&(i.name=e)},Yt=(i,t,e)=>{let[o,r]=g(i,"-");(o==="author"||o==="committer")&&Kt(e[o],r,t)},Xt=(i,t)=>w(i)&&/^\d+ \d+ \d+$/.test(t),Zt=(i,t,e)=>{i==="summary"?e.summary=t:w(i)?e.hash=i:(i.startsWith("author")||i.startsWith("committer"))&&Yt(i,t,e)};function*Jt(i){let[t,e,o]=i.split(" ").map(Number);for(let r=0;r<o;r++)yield{source:t+r,result:e+r}}function*ft(i,t,e){if(!(i===void 0||t===void 0)){e.set(i.commit.hash,i.commit);for(let o of t)yield{...i,line:o}}}async function*gt(i,t){let e,o;for await(let[r,n]of qt(i))Xt(r,n)&&(e=_t(t.get(r)??Vt(r)),o=Jt(n)),e&&(r==="filename"?(e.filename=n,yield*ft(e,o,t)):Zt(r,n,e.commit));yield*ft(e,o,t)}var B=class{constructor(t){this.fileName=t}store;process;killed=!1;getBlame(){return this.store??=this.blame(),this.store}dispose(){this.process?.kill(),this.killed=!0}async*run(t){this.process=ct(t,await pt(t));let e=new Map;for await(let o of this.process?.stdout??[])yield*gt(o,e);for await(let o of this.process?.stderr??[])if(typeof o=="string")throw new Error(o)}async blame(){let t=new Map,e=await(0,ht.realpath)(this.fileName);try{for await(let o of this.run(e))t.set(o.line.result,o)}catch(o){l.error(o),this.dispose()}if(!this.killed)return(0,vt.relative)(this.fileName,e)?l.info(`Blamed "${e}" (resolved via symlink from "${this.fileName}")`):l.info(`Blamed "${e}"`),t}};var R=class{list=[];storage=new Map;processing=new Set;_maxParallel;constructor(t=2){this.maxParallel=t}add(t){return new Promise(e=>{this.storage.set(t,e),this.processing.size<this.maxParallel?this.startFunction(t):this.list.push(t)})}updateParallel(t){let e=this.maxParallel;this.maxParallel=t;let o=Math.max(0,this.maxParallel-e);for(let r=0;r<o;r++)this.runNext()}set maxParallel(t){this._maxParallel=t}get maxParallel(){return Math.max(1,Number(this._maxParallel))}startFunction(t){this.processing.add(t);let e=this.storage.get(t);this.storage.delete(t),e&&t().then(e).finally(()=>{this.processing.delete(t),this.runNext()})}runNext(){if(this.processing.size<this.maxParallel){let t=this.list.shift();t&&this.startFunction(t)}}};var E=class{metadata=new WeakMap;files=new Map;fsWatchers=new Map;blameQueue=new R(s("parallelBlames"));configChange;constructor(){this.configChange=yt.workspace.onDidChangeConfiguration(t=>{t.affectsConfiguration("gitblame")&&this.blameQueue.updateParallel(s("parallelBlames"))})}async prepareFile(t){if(this.files.has(t))return;let e=()=>{};this.files.set(t,new Promise(m=>{e=m}));let{file:o,gitRoot:r}=await this.create(t);if(o===void 0){e(Promise.resolve(void 0));return}this.fsWatchers.set(o.fileName,(0,U.watch)(o.fileName,()=>{this.remove(o.fileName)}));let n=this.blameQueue.add(()=>o.getBlame());this.metadata.set(n,{file:o,gitRoot:r}),e(n)}async getLine(t,e){await this.prepareFile(t);let o=e+1;return(await this.files.get(t))?.get(o)}removeFromRepository(t){for(let[e,o]of this.files)this.metadata.get(o)?.gitRoot===t&&this.remove(e)}remove(t){let e=this.files.get(t);e&&this.metadata.get(e)?.file?.dispose(),this.files.delete(t),this.fsWatchers.get(t)?.close(),this.fsWatchers.delete(t)}dispose(){for(let t of this.files.keys())this.remove(t);this.configChange.dispose()}async create(t){try{await U.promises.access(t);let e=await T(t);if(e)return{gitRoot:e,file:new B(t)}}catch{}return l.info(`Will not blame '${t}'. Not in a git repository.`),{gitRoot:void 0,file:void 0}}};var bt=require("node:fs"),A=require("node:path");var I=class{heads=new Map;filesWithFoundHeads=new Set;callback=()=>{};onChange(t){this.callback=t}async addFile(t){if(this.filesWithFoundHeads.has(t))return;this.filesWithFoundHeads.add(t);let e=await T(t),o=this.normalizeWindowsDriveLetter(e);if(this.heads.has(o)===!0||e==="")return;let n=(0,A.resolve)(o,"..");this.heads.set(o,(0,bt.watch)((0,A.join)(o,"HEAD"),{persistent:!1},()=>this.callback({gitRoot:o,repositoryRoot:n})))}dispose(){for(let[,t]of this.heads)t.close();this.heads.clear(),this.filesWithFoundHeads.clear(),this.callback=()=>{}}normalizeWindowsDriveLetter(t){return t.length===0?"":t[0].toLowerCase()+t.substr(1)}};var Lt=require("node:url"),Ft=require("vscode");var xt=require("node:url"),wt=i=>{let t;try{t=new xt.URL(i)}catch{return!1}return t.href!==i||t.protocol!=="http:"&&t.protocol!=="https:"?!1:!!(t.hostname&&t.pathname)};var Tt=require("node:url");var z=i=>i.replace(/\.git$/i,""),S=i=>z(i).replace(/^([a-z-]+:\/\/)?([\w%:\\]+?@)?/i,"").replace(/:([a-z_.~+%-][a-z0-9_.~+%-]+)\/?/i,"/$1/");var Ct=i=>{let t=/^(https?):/.exec(i)?.[1],e;try{e=new Tt.URL(`${t??"https"}://${S(i)}`)}catch{return}return e.port=t?e.port:"",e};var Pt=i=>/([a-zA-Z0-9_~%+.-]*?)(\.git)?$/.exec(i)?.[1]??"";var H=(i,t,e="/")=>i.split(e).filter(r=>!!r)[Number(t)]||"invalid-index",te=({hostname:i})=>t=>t===""?i:H(i,t,"."),ee=i=>{if(/^[a-z]+?@/.test(i)){let[,t]=g(i,":");return(e="")=>e===""?`/${t}`:H(t,e)}try{let{pathname:t}=new Lt.URL(i);return(e="")=>e===""?t:H(t,e)}catch{return()=>"no-remote-url"}},ie=i=>(s("pluralWebPathSubstrings")??[]).some(t=>i.includes(t)),oe=async i=>{let t=s("remoteName"),e=await mt(t);if(e===t)return;let o=S(await lt(t)),r=Ct(o),n=await ut(),m=await dt(t);return{hash:i.commit.hash,"tool.protocol":r?.protocol??"https:","tool.commitpath":`/commit${ie(o)?"s":""}/`,"project.name":Pt(e),"project.remote":o,"project.defaultbranch":m,"gitorigin.hostname":r?te(r):"no-origin-url","gitorigin.path":ee(z(e)),"gitorigin.port":r?.port?`:${r.port}`:"","file.path":n,"file.path.result":n,"file.path.source":i.filename,"file.line":i.line.result.toString(),"file.line.result":i.line.result.toString(),"file.line.source":i.line.source.toString()}},M=async i=>{if(!i||f(i.commit))return;let t=await oe(i);if(t===void 0)return;let e=y(s("commitUrl"),t);if(wt(e))return Ft.Uri.parse(e,!0);d(`Malformed gitblame.commitUrl: '${e}' from '${s("commitUrl")}'`)};var k=class{disposable;blame;view;headWatcher;constructor(){this.blame=new E,this.view=new F,this.headWatcher=new I,this.disposable=this.setupListeners()}async blameLink(){let t=await this.commit(!0);if(t===void 0)return;let e=await M(t);e?a.commands.executeCommand("vscode.open",e):d("Empty gitblame.commitUrl")}async showMessage(){let t=await this.commit(!1);if(!t||f(t.commit)){this.view.clear();return}let e=y(s("infoMessageFormat"),L(t.commit)),o=await M(t),r=[];o&&r.push({title:"Online",action(){a.commands.executeCommand("vscode.open",o)}}),r.push({title:"Terminal",action:()=>this.runGitShow()}),this.view.set(t.commit,c()),(await P(e,r))?.action()}async copyHash(){let t=await this.commit(!0);t&&!f(t.commit)&&(await a.env.clipboard.writeText(t.commit.hash),P("Copied hash"))}async copyToolUrl(){let t=await this.commit(!0);if(t===void 0)return;let e=await M(t);e?(await a.env.clipboard.writeText(e.toString()),P("Copied tool URL")):d("gitblame.commitUrl config empty")}async runGitShow(){let t=c();if(!u(t))return;let e=await this.commit(!0);if(e===void 0)return;let{hash:o}=e.commit;if(!w(o,!0))return;let r=s("ignoreWhitespace")?"-w ":"",n=a.window.createTerminal({name:`Git Blame: git show ${o}`,iconPath:new a.ThemeIcon("git-commit"),isTransient:!0,cwd:(0,Bt.dirname)(t.document.fileName)});n.sendText(`git show ${r}${o}; exit 0`,!0),n.show()}async updateView(t=c(),e=!0){if(!this.view.preUpdate(t))return;if(t.document.lineCount>s("maxLineCount")){this.view.fileToLong();return}this.headWatcher.addFile(t.document.fileName);let o=$(t),r=await this.blame.getLine(t.document.fileName,t.selection.active.line),n=c();if(!u(n))return;let m=$(n);(o===m||m===O)&&this.view.set(r?.commit,t,e)}dispose(){this.view.dispose(),this.disposable.dispose(),this.blame.dispose(),this.headWatcher.dispose()}setupListeners(){let t=e=>{let{scheme:o}=e.document.uri;(o==="file"||o==="untitled")&&this.updateView(e)};return this.headWatcher.onChange(({repositoryRoot:e})=>this.blame.removeFromRepository(e)),a.Disposable.from(a.window.onDidChangeActiveTextEditor(e=>{u(e)?(this.view.activity(),this.blame.prepareFile(e.document.fileName),t(e)):this.view.clear()}),a.window.onDidChangeTextEditorSelection(({textEditor:e})=>{t(e)}),a.workspace.onDidSaveTextDocument(()=>{this.updateView()}),a.workspace.onDidCloseTextDocument(e=>{this.blame.remove(e.fileName)}),a.workspace.onDidChangeTextDocument(({document:e})=>{let o=c();o?.document===e&&this.updateView(o,!1)}))}async commit(t){let e=c();if(!u(e)){d("Unable to blame current line. Active view is not a file on disk.");return}if(e.document.lineCount>s("maxLineCount")){d("Git Blame is disabled for the current file"),this.view.fileToLong();return}t||this.view.activity(),this.headWatcher.addFile(e.document.fileName);let o=await this.blame.getLine(e.document.fileName,e.selection.active.line);return o||d("Unable to blame current line. Unable to get blame information for line."),o}};var C=(i,t)=>Rt.commands.registerCommand(`gitblame.${i}`,t),re=i=>{let t=new k;i.subscriptions.push(t,l.getInstance(),C("quickInfo",()=>{t.showMessage()}),C("online",()=>{t.blameLink()}),C("addCommitHashToClipboard",()=>{t.copyHash()}),C("addToolUrlToClipboard",()=>{t.copyToolUrl()}),C("gitShow",()=>{t.runGitShow()})),t.updateView()};
