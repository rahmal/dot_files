"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const MessageHandler_1 = require("../../lib/MessageHandler");
const MultifileHelper_1 = require("../MultifileHelper");
(0, vitest_1.test)('basic doc', () => __awaiter(void 0, void 0, void 0, function* () {
    const helper = yield (0, MultifileHelper_1.getMultifileHelper)('user-posts');
    const user = helper.file('User.prisma');
    const response = (0, MessageHandler_1.handleHoverRequest)(helper.schema, user.textDocument, {
        textDocument: {
            uri: user.uri,
        },
        position: user.lineContaining('posts Post[]').characterAfter('Po'),
    });
    (0, vitest_1.expect)(response).toMatchInlineSnapshot(`
    {
      "contents": "This is a blog post",
    }
  `);
}));
//# sourceMappingURL=multi-file.test.js.map