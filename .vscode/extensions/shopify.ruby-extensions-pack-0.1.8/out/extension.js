"use strict";var b=Object.create;var u=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var O=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,C=Object.prototype.hasOwnProperty;var A=(n,e)=>{for(var t in e)u(n,t,{get:e[t],enumerable:!0})},v=(n,e,t,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of O(e))!C.call(n,o)&&o!==t&&u(n,o,{get:()=>e[o],enumerable:!(i=E(e,o))||i.enumerable});return n};var d=(n,e,t)=>(t=n!=null?b(w(n)):{},v(e||!n||!n.__esModule?u(t,"default",{value:n,enumerable:!0}):t,n)),N=n=>v(u({},"__esModule",{value:!0}),n);var _={};A(_,{activate:()=>T,deactivate:()=>I});module.exports=N(_);var l=d(require("vscode"));var c=d(require("vscode"));var y=d(require("vscode")),a="ruby-extensions-pack",h=y.extensions.getExtension(`shopify.${a}`).packageJSON.version,p=`shopify.${a}.${h}.cancelled_overrides`,r=`shopify.${a}.${h}.approved_all_overrides`,f=`shopify.${a}.${h}.shadowed_settings`;var S=d(require("vscode"));var s=class{constructor(e,t,i,o,m,x){this.context=e,this.configurationStore=t,this.section=i,this.name=o,this.value=m,this.scope=x,this.configurationEntry=this.configurationStore.getConfiguration(this.section,this.scope),this.existingConfig=this.configurationEntry.inspect(this.name),this.shadowedByWorkspaceSetting=this.shadowed()}match(){return JSON.stringify(this.existingConfig?.globalValue)===JSON.stringify(this.value)||JSON.stringify(this.existingConfig?.globalLanguageValue)===JSON.stringify(this.value)}needsOverride(){return this.existingConfig===void 0||!this.match()}update(e="Override"){e==="Override both"?(this.configurationEntry.update(this.name,this.value,!0,!0),this.configurationEntry.update(this.name,this.value,!1,!0)):this.configurationEntry.update(this.name,this.value,e==="Override"||e==="Apply",!0)}fullName(){return`${this.section}.${this.name}`}printableValue(){return JSON.stringify(this.value)}clear(){this.configurationEntry.update(this.name,void 0,!0,!0),this.context.globalState.update(`${p}.${this.name}`,void 0)}async promptOverride(){if(this.context.globalState.get(`${p}.${this.name}`)||!this.needsOverride())return"Cancel";let e=`The setting ${this.fullName()} doesn't match our recommendation (${this.printableValue()})`,t=!0;(this.existingConfig===void 0||this.existingConfig.globalValue===void 0)&&(e=`No configuration found for ${this.fullName()}. Would you like to apply the suggested default (${this.printableValue()})?`,t=!1);let i=[t?"Override":"Apply","Cancel"];this.shadowedByWorkspaceSetting&&(e=e.concat(" and is shadowed by a workspace setting"),i=["Override","Override workspace","Override both","Cancel"]);let o=await S.window.showInformationMessage(e,...i);return o==="Cancel"&&this.context.globalState.update(`${p}.${this.name}`,!0),o??"Cancel"}valuesAreDifferent(e,t){return e!==void 0&&JSON.stringify(e)!==JSON.stringify(t)}shadowed(){return!!(this.existingConfig&&(this.valuesAreDifferent(this.existingConfig.workspaceValue,this.value)||this.valuesAreDifferent(this.existingConfig.workspaceFolderValue,this.value)||this.valuesAreDifferent(this.existingConfig.workspaceLanguageValue,this.value)||this.valuesAreDifferent(this.existingConfig.workspaceFolderLanguageValue,this.value)))}};var k=[{scope:{languageId:"ruby"},section:"editor",name:"defaultFormatter",value:"Shopify.ruby-lsp"},{scope:{languageId:"ruby"},section:"editor",name:"formatOnSave",value:!0},{scope:{languageId:"ruby"},section:"editor",name:"formatOnType",value:!0},{scope:{languageId:"ruby"},section:"editor",name:"tabSize",value:2},{scope:{languageId:"ruby"},section:"editor",name:"insertSpaces",value:!0},{scope:{languageId:"ruby"},section:"files",name:"trimTrailingWhitespace",value:!0},{scope:{languageId:"ruby"},section:"files",name:"insertFinalNewline",value:!0},{scope:{languageId:"ruby"},section:"files",name:"trimFinalNewlines",value:!0},{scope:{languageId:"ruby"},section:"editor",name:"rulers",value:[120]},{scope:{languageId:"ruby"},section:"editor.semanticHighlighting",name:"enabled",value:!0}];var g=class{constructor(e,t){this.settings=k.map(i=>new s(t,e,i.section,i.name,i.value,i.scope)),this.allSettingsMatch=this.settings.every(i=>i.match()),this.context=t,this.overrideStatus=this.getApproveAll(),this.configurationStore=e}async applyDefaults(e=!1){if(this.allSettingsMatch||((this.overrideStatus===void 0||e)&&(this.overrideStatus=await this.promptOverrideStatus()),this.overrideStatus==="cancel"))return;let t=this.overrideStatus==="approvedAll";e||t?(this.settings.forEach(i=>i.update()),this.showShadowedWarning()):this.recursivelyPromptSetting(0)}async offerTheme(){if(this.context.globalState.get(`shopify.${a}.offeredTheme`))return;let e=new s(this.context,this.configurationStore,"workbench","colorTheme","Spinel");if(e.match()){this.context.globalState.update(`shopify.${a}.offeredTheme`,!0);return}await c.window.showInformationMessage("The new Spinel theme (dark) is tailored for Ruby code. Would you like to try it?","Yes","No")==="Yes"&&e.update(),this.context.globalState.update(`shopify.${a}.offeredTheme`,!0)}clearState(){this.settings.forEach(t=>t.clear()),this.context.globalState.keys().filter(t=>/shopify\.ruby-extensions-pack\..*\.approved_all_overrides/.exec(t)).forEach(t=>{this.context.globalState.update(t,void 0)})}recursivelyPromptSetting(e){if(e>=this.settings.length)return;let t=this.settings[e];t.promptOverride().then(i=>{i!=="Cancel"&&t.update(i),this.recursivelyPromptSetting(e+1)}).catch(()=>{})}async promptOverrideStatus(){let e=await c.window.showInformationMessage("Would you like to apply all of the suggested configuration defaults?","Apply All","Decide for each","Cancel");return e==="Apply All"?(this.context.globalState.update(r,"approvedAll"),"approvedAll"):e==="Decide for each"?(this.context.globalState.update(r,"approveEach"),"approveEach"):(this.context.globalState.update(r,"cancel"),"cancel")}getApproveAll(){let e=this.context.globalState.get(r);if(e)return e;let t=this.context.globalState.keys(),i=t.find(o=>/shopify\.ruby-extensions-pack\..*\.approved_all_overrides/.exec(o));if(i!==void 0&&this.context.globalState.get(i)==="approvedAll"&&this.allSettingsMatch)return t.forEach(o=>{this.context.globalState.update(o,void 0)}),this.context.globalState.update(r,"approvedAll"),"approvedAll"}showShadowedWarning(){if(this.context.workspaceState.get(f))return;let e=this.settings.filter(t=>t.shadowedByWorkspaceSetting);if(e.length>0){let t=e.map(i=>i.fullName()).join(", ");this.context.workspaceState.update(f,!0),c.window.showWarningMessage(`These settings won't take effect because they are overridden by .vscode/settings.json: ${t}`)}}};async function T(n){let e=new g(l.workspace,n);await e.applyDefaults(),await e.offerTheme(),n.subscriptions.push(l.commands.registerCommand("rubyExtensionsPack.forceApplyDefaults",()=>e.applyDefaults(!0))),n.subscriptions.push(l.commands.registerCommand("rubyExtensionsPack.clearState",()=>e.clearState()))}function I(){}0&&(module.exports={activate,deactivate});
